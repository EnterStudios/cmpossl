=pod

=head1 NAME

  CMP_add_error_txt,
  CMP_add_error_data,
  CMP_add_error_line,
  CMP_REVREPCONTENT_PKIStatus_get,
  CMP_PKIMESSAGE_pollResponse_get0,
  CMP_CERTREPMESSAGE_certResponse_get0,
  CMP_CERTSTATUS_set_certHash,
  CMP_PKIFAILUREINFO_check,
  CMP_PKIHEADER_generalInfo_item_push0,
  CMP_PKIMESSAGE_generalInfo_items_push1,
  CMP_PKIHEADER_new_senderNonce,
  CMP_PKIHEADER_push0_freeText,
  CMP_PKIHEADER_push1_freeText,
  CMP_PKIMESSAGE_get0_header,
  CMP_PKIHEADER_get0_transactionID,
  CMP_PKIHEADER_get0_senderNonce,
  CMP_PKIHEADER_get0_recipNonce,
  CMP_PKIHEADER_init,
  CMP_PKIHEADER_set1_recipient,
  CMP_PKIHEADER_set1_sender,
  CMP_PKIHEADER_set1_senderKID,
  CMP_PKIHEADER_set1_transactionID,
  CMP_PKIHEADER_set_messageTime,
  CMP_PKIHEADER_set_version,
  CMP_PKIMESSAGE_check_implicitConfirm,
  CMP_PKIMESSAGE_genm_item_push0,
  CMP_PKIMESSAGE_get_bodytype,
  CMP_PKIMESSAGE_get_transactionID,
  CMP_PKISTATUSINFO_snprint,
  CMP_PKIMESSAGE_set_bodytype,
  CMP_PKIMESSAGE_set_implicitConfirm,
  CMP_calc_protection,
  CMP_PKIMESSAGE_protect,
  CMP_PKIMESSAGE_add_extraCerts,
  CMP_ITAV_new,
  CMP_statusInfo_new,
  CMP_PKISTATUSINFO_PKIStatus_get,
  CMP_get_protectionAlg_pbmac,
  CMP_CERTRESPONSE_get_certificate,
  CMP_build_cert_chain,
  CMP_PKIMESSAGE_check_received,
  CMP_ASN1_OCTET_STRING_set1,
  CMP_sk_X509_add1_cert,
  CMP_sk_X509_add1_certs,
  CMP_X509_STORE_add1_certs,
  CMP_X509_STORE_get1_certs

=head1 SYNOPSIS

  #include <openssl/cmp.h>

  void CMP_add_error_txt(const char *separator, const char *txt);
  void CMP_add_error_data(const char *txt);
  void CMP_add_error_line(const char *txt);
  CMP_PKISTATUSINFO *CMP_REVREPCONTENT_PKIStatusInfo_get(CMP_REVREPCONTENT *rrep, long rsid);
  CMP_POLLREP *CMP_PKIMESSAGE_pollResponse_get0(CMP_PKIMESSAGE *prep, long rid);
  CMP_CERTRESPONSE *CMP_CERTREPMESSAGE_certResponse_get0( CMP_CERTREPMESSAGE *certRep, long certReqId);
  int CMP_CERTSTATUS_set_certHash( CMP_CERTSTATUS *certStatus, const X509 *cert);
  char *CMP_ERRORMSGCONTENT_PKIStatus_get_string( CMP_ERRORMSGCONTENT *error);
  int CMP_PKIFAILUREINFO_check( ASN1_BIT_STRING *failInfo, int codeBit);
  int CMP_PKIHEADER_generalInfo_item_push0(CMP_PKIHEADER *hdr, const CMP_INFOTYPEANDVALUE *itav);
  int CMP_PKIMESSAGE_generalInfo_items_push1(CMP_PKIMESSAGE *msg, STACK_OF(CMP_INFOTYPEANDVALUE) *itavs);
  int CMP_PKIHEADER_new_senderNonce(CMP_PKIHEADER *hdr);
  int CMP_PKIHEADER_push0_freeText( CMP_PKIHEADER *hdr, ASN1_UTF8STRING *text);
  int CMP_PKIHEADER_push1_freeText( CMP_PKIHEADER *hdr, ASN1_UTF8STRING *text);
  CMP_PKIHEADER *CMP_PKIMESSAGE_get0_header(const CMP_PKIMESSAGE *msg);
  ASN1_OCTET_STRING *CMP_PKIHEADER_get0_transactionID(const CMP_PKIHEADER *hdr);
  ASN1_OCTET_STRING *CMP_PKIHEADER_get0_senderNonce(const CMP_PKIHEADER *hdr);
  ASN1_OCTET_STRING *CMP_PKIHEADER_get0_recipNonce(const CMP_PKIHEADER *hdr);
  int CMP_PKIHEADER_init(CMP_CTX *ctx, CMP_PKIHEADER *hdr);
  int CMP_PKIHEADER_set1_recipient(CMP_PKIHEADER *hdr, const X509_NAME *nm);
  int CMP_PKIHEADER_set1_sender(CMP_PKIHEADER *hdr, const X509_NAME *nm);
  int CMP_PKIHEADER_set1_senderKID(CMP_PKIHEADER *hdr, const ASN1_OCTET_STRING *senderKID);
  int CMP_PKIHEADER_set1_transactionID(CMP_PKIHEADER *hdr, const ASN1_OCTET_STRING *transactionID);
  int CMP_PKIHEADER_set_messageTime(CMP_PKIHEADER *hdr);
  int CMP_PKIHEADER_set_version(CMP_PKIHEADER *hdr, int version);
  int CMP_PKIMESSAGE_check_implicitConfirm(CMP_PKIMESSAGE *msg);
  int CMP_PKIMESSAGE_genm_item_push0(CMP_PKIMESSAGE *msg, const CMP_INFOTYPEANDVALUE *itav);
  int CMP_PKIMESSAGE_genm_items_push1(CMP_PKIMESSAGE *msg, STACK_OF(CMP_INFOTYPEANDVALUE) *itavs);
  int CMP_PKIMESSAGE_get_bodytype(const CMP_PKIMESSAGE *msg);
  ASN1_OCTET_STRING *CMP_PKIMESSAGE_get_transactionID(const CMP_PKIMESSAGE *msg);
  char *CMP_PKISTATUSINFO_snprint(CMP_PKISTATUSINFO *si, char *buf, int bufsize);
  int CMP_PKIMESSAGE_set_bodytype( CMP_PKIMESSAGE *msg, int type);
  int CMP_PKIMESSAGE_set_implicitConfirm(CMP_PKIMESSAGE *msg);
  ASN1_BIT_STRING *CMP_calc_protection(const CMP_PKIMESSAGE *msg,
                                       const ASN1_OCTET_STRING *secret,
                                       const EVP_PKEY *pkey);
  int CMP_PKIMESSAGE_protect(CMP_CTX *ctx, CMP_PKIMESSAGE *msg);
  int CMP_PKIMESSAGE_add_extraCerts(CMP_CTX *ctx, CMP_PKIMESSAGE *msg);
  CMP_INFOTYPEANDVALUE *CMP_ITAV_new(const ASN1_OBJECT *type, const ASN1_TYPE *value);
  CMP_PKISTATUSINFO *CMP_statusInfo_new(int status, int failure, const char *text);
  long CMP_PKISTATUSINFO_PKIStatus_get( CMP_PKISTATUSINFO *statusInfo);
  X509_ALGOR *CMP_get_protectionAlg_pbmac();
  X509 *CMP_CERTRESPONSE_get_certificate(CMP_CTX *ctx, CMP_CERTRESPONSE *crep);
  STACK_OF(X509) *CMP_build_cert_chain(X509_STORE *store, const X509 *cert);
  int CMP_PKIMESSAGE_check_received(CMP_CTX *ctx, const CMP_PKIMESSAGE *prev,
                                    const CMP_PKIMESSAGE *msg, int callback_arg,
                                    int (*allow_unprotected)(const CMP_CTX *,
                                    int, const CMP_PKIMESSAGE *));
  int CMP_ASN1_OCTET_STRING_set1(ASN1_OCTET_STRING **tgt,
                                 const ASN1_OCTET_STRING *src);
  int CMP_sk_X509_add1_cert (STACK_OF(X509) *sk, X509 *cert, int not_duplicate);
  int CMP_sk_X509_add1_certs(STACK_OF(X509) *sk, STACK_OF(X509) *certs,
                             int no_self_signed, int no_duplicates);
  int CMP_X509_STORE_add1_certs(X509_STORE *store, STACK_OF(X509) *certs,
                                int only_self_signed);
  STACK_OF(X509) *CMP_X509_STORE_get1_certs(const X509_STORE *store);

=head1 DESCRIPTION

CMP_add_error_txt() appends text to the extra error data field of the last error
message in openssl's error queue, after adding the given separator string. Note
that, in contrast, ERR_add_error_data() simply overwrites the previous contents
of the error data.

CMP_add_error_data() is implemented as a macro calling CMP_add_error_txt()
with the separator being ":".

CMP_add_error_line() is implemented as a macro calling CMP_add_error_txt()
with the separator being "\n".

CMP_REVREPCONTENT_PKIStatusInfo_get() returns the status field of the
RevRepContent with the given request/sequence id inside a revocation response
(matching the sequence id as sent in the RevReqContent), or NULL on error.

CMP_PKIMESSAGE_pollResponse_get0() returns a pointer to the PollResponse
with the given certReqId (or the first one in case -1) inside a pollRep PKIMessage.
If no PollResponse is available or if there is an error, it returns NULL.

CMP_CERTREPMESSAGE_certResponse_get0() returns a pointer to the CertResponse
with the given certReqId (or the first one in case -1 inside a CertRepMessage.
If no CertResponse is available or if there is an error, it returns NULL.

CMP_CERTSTATUS_set_certHash() calculates a hash of the certificate,
using the same hash algorithm as is used to create and verify the
certificate signature, and places the hash into the certHash field of a
CMP_CERTSTATUS structure. This is used in the certConf message, for
example, to confirm that the certificate was received successfully.

CMP_PKIFAILUREINFO_check() checks whether a given bit is set within a
given PKIFailureInfo.

CMP_PKIHEADER_generalInfo_item_push0() adds the given InfoTypeAndValue
item to the hdr->generalInfo stack. Consumes the B<itav> pointer.

CMP_PKIMESSAGE_generalInfo_items_push1() adds a copy of the B<itavs> stack to
the generalInfo field of PKIheader of the B<msg>. Does not consume the B<itavs>
pointer.

CMP_PKIHEADER_new_senderNonce() generates a random value for the
hdr->senderNonce field, which is used to protect the PKIMessage against
replay attacks.

CMP_PKIHEADER_push0_freeText() pushes an ASN1_UTF8STRING to
hdr->freeText and consumes the given pointer.

CMP_PKIHEADER_push1_freeText() pushes an ASN1_UTF8STRING to
hdr->freeText and does not consume the pointer.

CMP_PKIMESSAGE_get0_header returns the header of the given CMP message.

CMP_PKIHEADER_get0_transactionID returns the transaction ID of the given PKIHeader.

CMP_PKIHEADER_get0_senderNonce returns the sender nonce of the given PKIHeader.

CMP_PKIHEADER_get0_recipNonce returns the recipient nonce of the given PKIHeader.

CMP_PKIHEADER_init() initializes a PKIHeader structure based on the
values in the given CMP_CTX structure.

CMP_PKIHEADER_set1_recipient() sets the recipient field in the given
PKIHeader to the given X509 Name value, without consuming the pointer.

CMP_PKIHEADER_set1_sender() sets the sender field in the given PKIHeader
to the given X509 Name value, without consuming the pointer.

CMP_PKIHEADER_set1_senderKID() Sets hdr->senderKID to the given
string. In IR this is the reference number issued by the CA. In KUR
this is set to the public key ID from the previously enrolled certificate.

CMP_PKIHEADER_set1_transactionID() copies the given transactionID to
hdr->transactionID. If the transactionID parameter is NULL, a new random
value is generated for it.

CMP_PKIHEADER_set_messageTime() sets the messageTime to the current system time.

CMP_PKIHEADER_set_version() sets hdr->pvno to the given integer.

CMP_PKIMESSAGE_check_implicitConfirm() returns 1 if implicitConfirm is
set in the given PKIMessage, 0 if not.

CMP_PKIMESSAGE_genm_item_push0() pushes the B<itav> to the body of the
of the PKIMessage B<msg> of GenMsg type. Consumes the B<itavs> pointer.

CMP_PKIMESSAGE_genm_items_push1() adds a copy of the B<itavs> stack to the body
of the PKIMessage B<msg> of GenMsg type. Does not consume the B<itavs> pointer.

CMP_PKIMESSAGE_get_bodytype() returns the body type of the given
PKIMessage.

CMP_PKIMESSAGE_get_transactionID() returns the transactionID of the given PKIMessage.

ASN1_OCTET_STRING *CMP_PKIMESSAGE_get_transactionID(const CMP_PKIMESSAGE *msg)

CMP_PKISTATUSINFO_snprint() places human-readable error string
created from PKIStatusInfo in given buffer.

CMP_PKIMESSAGE_set_bodytype() sets the type of the message contained in
the PKIMessage body field.

CMP_PKIMESSAGE_set_implicitConfirm() sets implicitConfirm in the
generalInfo field of the header.

CMP_calc_protection()
calculates the protection for given PKImessage utilizing the given credentials
and the algorithm parameters set inside the message header's protectionAlg.
Does PBMAC in case B<secret> is non-NULL and signature using B<pkey> otherwise.

CMP_PKIMESSAGE_protect() protects the given message deciding on the algorithm
depending on the available context information:  If there is a secretValue it
selects PBMAC. If not and there is a clCert it selects Signature.  Generates and
sets the protection to the given message.

CMP_PKIMESSAGE_add_extraCerts() fills the extraCerts field in the message.

CMP_ITAV_new() creates a new CMP_INFOTYPEANDVALUE structure and fills it in.

CMP_statusInfo_new() creates a new PKIStatusInfo structure and fills it in.

CMP_PKISTATUSINFO_PKIStatus_get() returns the status value of the given PKIStatusInfo.

CMP_get_protectionAlg_pbmac() initializes an X509_ALGOR structure for
Password Based MAC. Creates a CRMF_PBMPARAMETER structure for the
parameters.

CMP_CERTRESPONSE_get_certificate() attempts to retrieve the returned
certificate from the given certResponse B<crep>.
Takes the newKey in case of indirect POP from B<ctx>.
Returns a pointer to a copy of the found certificate, or NULL if not found.

CMP_build_cert_chain() builds up the certificate chain of cert as high up as possible
using the given X509_STORE containing all possible intermediate certificates and
optionally the (possible) trust anchor(s).

CMP_PKIMESSAGE_check_received() checks for the given message received (i.e.,
response by server or request from client) whether it has a valid body type,
its protection can be validated or is absent (allowed only if callback function
is present and function yields positive result using also supplied argument),
its transaction ID matches the one of the previous message (if any), and
its recipNonce matches the senderNonce of the previous message (if any).
If so, learns from the message received the senderNonce
       and the transaction ID if not yet present in the ctx.
It returns the body type (which is >= 0) of the message on success, -1 on error.

CMP_ASN1_OCTET_STRING_set1() frees any previous value of the variable referenced
via the first argument and assigns either a copy of the string given as the
second argument or NULL. It returns 1 on success, 0 on error.

CMP_sk_X509_add1_cert() adds a certificate to given stack, optionally only if
not already contained.

CMP_sk_X509_add1_certs() adds certificates to given stack, optionally only if
not self-signed and optionally only if not already contained.

CMP_X509_STORE_add1_certs() adds all or only self-signed certificates from the
 given stack to given store.

CMP_X509_STORE_get1_certs() retrieves a copy of all certificates in the given
store.


=head1 NOTES

CMP is defined in RFC 4210 (and CRMF in RFC 4211).

The implementation of CMP for OpenSSL is still work in progress. The API
might change every release!

=head1 RETURN VALUES

=head1 EXAMPLE

=head1 SEE ALSO

CMP_CTX, CMP_ses, CMP_msg, CMP_http
